Day04 = (
    | input |

    setup = (
        | parser |
        input := system loadFile: 'inputs/day04.txt'.
        input ifNil: [ self error: 'could not open input file' ].

        input := input split: '\n'.
        input := input reject: [ :it | it length = 0 ].
        input := input asArray.

        parser := (Parser unsignedInteger separatedBy1: (Parser just: ' ') some)
            paddedBy: (Parser just: ' ') many.

        parser := (Parser justAll: 'Card') *> (Parser just: ' ') some *> Parser unsignedInteger <* (Parser justAll: ':')
            <*> (parser <* (Parser just: '|') <*> parser).

        parser := parser map: [ :output |
            Day04Card
                id: output fst
                winning: (MyHashSet fromCollection: output snd fst)
                numbers: output snd snd
        ].

        input := input collect: [ :line |
            | result |
            result := parser apply: (ParseInput new: line).
            result error
                ifNil: [ result output ]
                ifNotNil: [ self error: result error ]
        ].
    )

    part1 = (
        | answer |

        answer := input inject: 0 into: [ :acc :card |
            card := card score.
            card > 0 ifTrue: [ card := 2 raisedTo: card - 1 ].
            acc + card.
        ].

        ('part1: ' + answer) println.
    )

    part2 = (
        | answer |

        answer := Array new: input length withAll: 1.
        1 to: answer length do: [ :idx |
            | count |
            count := answer at: idx.
            idx + 1 to: idx + (input at: idx) score do: [ :idx |
                answer at: idx put: (answer at: idx) + count.
            ].
        ].
        answer := answer sum.

        ('part2: ' + answer) println.
    )

    run: args = (
        self setup.
        Timing measure: [ self part1 ].
        Timing measure: [ self part2 ].
    )
)
